#!/usr/bin/env python3

###############################################################################
#                 KEY AMINOACID PATTERN-BASED PROTEIN ANALYZER                #
#                     KAPPA 1.1 -- FASTA formatting script                    #
###############################################################################

# =============================================================================
# PLEASE CITE:
#   Joly V and Matton DP (2015). KAPPA, a simple algorithm for discovery and
#   clustering of proteins defined by a key amino acid pattern: a case study
#   of the cysteine-rich proteins. Bioinformatics, 31(11), 1716--1723.
#   DOI: 10.1093/bioinformatics/btv047
# =============================================================================
# LICENSE
#   This program is under Creative Commons BY-NC-SA 3.0 License
#   More information at: http://creativecommons.org/licenses/by-nc-sa/3.0/
# =============================================================================
# CONTACT
#   Valentin Joly, doctorant / Ph.D. student
#   Université de Montréal - Institut de Recherche en Biologie Végétale
#   4101, rue Sherbrooke Est
#   Montréal (QC) H2J 2B2
#   valentin.joly (at) umontreal.ca
# =============================================================================

import argparse
import datetime
import os
import re
import sys


def print_stdout(message, level, end):
    time = datetime.datetime.now().strftime('%H:%M:%S')
    print(time, end='')
    spacer = ' ' * (level + 1) * 4
    print(spacer, end='')
    print(message)
    print(end, end='')


def import_sequences(input_file_name, species, append_species, dont_sort):

    print_stdout(
        'Importing sequences from ' + input_file_name + '...',
        level=0, end='')

    input_file = open(input_file_name, 'r')
    fasta_ID_structure = re.compile('^>[ ]*([^\t ]*)(.*)$')

    sequences = {}
    descriptions = {}
    seqIDs = []

    i = -1

    for line in input_file:
        line = line.strip()
        i += 1
        if line != '':
            if line[0] == '>':
                fasta_match = fasta_ID_structure.match(line)
                if fasta_match is not None:
                    seqID = str(fasta_match.group(1))
                    seqID = seqID.strip()
                    seqIDs.append(seqID)
                    sequences[seqID] = ''
                    descriptions[seqID] = ''

                    desc = str(fasta_match.group(2))
                    desc = desc.strip()
                    if '[' in desc or ']' in desc:
                        if species is not None:
                            sys.stderr.write(
                                'ERROR: Option -x is used, but at least 1 '
                                'original sequence description already '
                                'contains information between square '
                                'brackets.\n\n'
                            )
                            sys.exit(1)
                        elif append_species:
                            sys.stderr.write(
                                'ERROR: Option -a is used, but at least 1 '
                                'original sequence description already '
                                'contains information between square '
                                'brackets.\n\n'
                            )
                            sys.exit(1)
                        else:
                            descriptions[seqID] += desc
                    elif species is None and not replace_species:
                        errors.append(
                            'ERROR: Species/Sample name is not present in at '
                            'least 1 original sequence and needs to be '
                            'provided using option -x.'
                        )
                        sys.exit(1)
                    else:
                        descriptions[seqID] += desc

                else:
                    sys.stderr.write(
                        'ERROR: Sequence file does not respect FASTA format '
                        'specifications.\n'
                    )
                    sys.stderr.write(
                        '       Sequence identification lines should look '
                        'like:\n'
                    )
                    sys.stderr.write(
                        '       >sequence_identification [species/sample] '
                        'description\n\n'
                    )
                    sys.exit(1)

            else:
                if i > -1:
                    sequences[seqID] += line.upper()

    if not dont_sort:
        seqIDs.sort()

    print_stdout(
        'Done. ' + str(len(sequences)) + ' sequences imported.',
        level=1,
        end='\n')

    return sequences, descriptions, seqIDs


def remove_redundancy(sequences, descriptions):

    print_stdout('Merging redundant sequences...', level=0, end='')

    tmp = {}
    for seqID in sequences.keys():
        sequence = sequences[seqID]
        if sequence not in tmp.keys():
            tmp[sequence] = [seqID]
        else:
            tmp[sequence].append(seqID)

    not_redundant_sequences, not_redundant_descriptions = {}, {}
    not_redundant_seqIDs = []
    for sequence in tmp:
        seqIDs = tmp[sequence]
        seqID = seqIDs[0]
        not_redundant_seqIDs.append(seqID)
        if len(seqIDs) == 1:
            not_redundant_descriptions[seqID] = descriptions[seqID]
        else:
            not_redundant_descriptions[seqID] = 'Alt_SeqIDs: ' + ', '.join(
                seqIDs[1:]) + ' ' + descriptions[seqID]
        not_redundant_sequences[seqID] = sequence

    tmp = {}

    print_stdout(
        'Done. ' + str(len(not_redundant_sequences)) + ' sequences remaining.',
        level=1,
        end='\n')

    return (not_redundant_sequences, not_redundant_descriptions,
            not_redundant_seqIDs)


def modify_seqids(sequences, descriptions, seqIDs, prefix, suffix, number):

    print_stdout('Modifying sequence identifiers...', level=0, end='')

    new_sequences, new_descriptions, new_seqIDs = {}, {}, []

    n = 0
    for seqID in seqIDs:
        n += 1

        if number:
            new_seqID = str(n).zfill(len(str(len(sequences))))
            descriptions[
                seqID] = 'Full_SeqID: ' + seqID + ' ' + descriptions[seqID]
        else:
            new_seqID = seqID

        if prefix is not None:
            new_seqID = prefix + new_seqID
        if suffix is not None:
            new_seqID = new_seqID + suffix

        new_sequences[new_seqID] = sequences[seqID]
        new_descriptions[new_seqID] = descriptions[seqID]
        new_seqIDs.append(new_seqID)

    print_stdout('Done.', level=1, end='\n')

    return new_sequences, new_descriptions, new_seqIDs


def modify_descriptions(descriptions, species, replace_description,
                        append_description):

    print_stdout('Modifying sequence descriptions...', level=0, end='')

    new_descriptions = {}

    for seqID in descriptions.keys():
        if replace_description is not None:
            new_description = replace_description
        elif append_description is not None:
            new_description = descriptions[seqID] + ' ' + append_description
        else:
            new_description = descriptions[seqID]
        if species:
            new_description = '[' + species + '] ' + new_description
        new_description.strip()
        new_descriptions[seqID] = new_description

    print_stdout('Done.', level=1, end='\n')

    return new_descriptions


def export_sequences(sequences, descriptions, output_file_name, seqIDs):

    print_stdout(
        'Exporting sequences to ' + output_file_name + '...', level=0, end='')

    output_file = open(output_file_name, 'w')

    for seqID in seqIDs:
        output_file.write('>' + seqID + ' ' + descriptions[seqID] + '\n' +
                          sequences[seqID] + '\n')

    output_file.close()

    print_stdout('Done.', level=1, end='\n')


if __name__ == '__main__':

    print('')
    print('*'*80)
    print('*' + ' '*21 + 'KAPPA 1.1 -- FASTA formatting script' +
          ' '*21 + '*')
    print('*'*80)
    print('')

    parser = argparse.ArgumentParser(
        description='KAPPA FASTA file formatting script.', add_help=False)
    group1 = parser.add_argument_group('General parameters')
    group1.add_argument(
        '-i',
        '--input',
        metavar='FILE',
        required=True,
        help="Input FASTA file.")
    group1.add_argument(
        '-o',
        '--output',
        metavar='FILE',
        required=True,
        help="Output FASTA file.")
    group1.add_argument(
        '-p',
        '--prefix',
        metavar='STR',
        required=False,
        default=None,
        type=str,
        help="Prefix string for sequence IDs. Default = None.")
    group1.add_argument(
        '-s',
        '--suffix',
        metavar='STR',
        required=False,
        default=None,
        type=str,
        help="Suffix string for sequence IDs. Default = None.")
    group1.add_argument(
        '-x',
        '--species',
        metavar='STR',
        required=False,
        default=None,
        type=str,
        help="Species/Sample string. Default = None.")
    group1.add_argument(
        '-r',
        '--replace_description',
        metavar='STR',
        required=False,
        default=None,
        type=str,
        help="Replace sequence description string. Default = None.")
    group1.add_argument(
        '-a',
        '--append_description',
        metavar='STR',
        required=False,
        default=None,
        type=str,
        help="Append a string to existing description. Default = None.")
    group1.add_argument(
        '-d',
        '--dont_sort',
        required=False,
        default=False,
        action='store_true',
        help="Do not sort sequence ids (Keep original order).")
    group1.add_argument(
        '-n',
        '--number',
        required=False,
        default=False,
        action='store_true',
        help='Rename sequences with a number. Use combined to option -p to '
        'add a prefix. Original sequence names will be mentioned in the '
        'description.'
    )
    group1.add_argument(
        '-R',
        '--remove_redundants',
        required=False,
        default=False,
        action='store_true',
        help="Remove redundant sequences in the dataset.")
    group1.add_argument(
        '-h', '--help', action='help', help='Print this help page and exit.')
    group1.add_argument(
        '-V',
        '--version',
        action='version',
        version='Current version: KAPPA 1.1',
        help='Show program\'s version number and exit.')

    args = parser.parse_args()
    input_file_name = args.input
    output_file_name = args.output
    prefix = args.prefix
    suffix = args.suffix
    species = args.species
    replace_description = args.replace_description
    append_description = args.append_description
    dont_sort = args.dont_sort
    number = args.number
    remove_redundants = args.remove_redundants

    errors = []

    try:
        if not os.path.exists(input_file_name):
            raise ValueError
    except ValueError:
        errors.append('ERROR: -i: File ' + input_file_name +
                      ' does not exist.')

    try:
        if os.path.exists(output_file_name):
            raise ValueError
    except ValueError:
        errors.append('ERROR: -o: File ' + output_file_name +
                      ' does already exist.')

    description_structure = re.compile('^[^\[\]]*\[[^\[\]]*\][^\[\]]*$')

    append_species, replace_species = False, False
    if replace_description is not None and description_structure.match(
            replace_description):
        replace_species = True
    if append_description is not None and description_structure.match(
            append_description):
        append_species = True

    try:
        if replace_description is not None and append_description is not None:
            raise ValueError
    except ValueError:
        errors.append(
            'ERROR: Conflict: -a/-r: Options -a and -r cannot be used at the '
            'same time.'
        )

    try:
        if species is not None and replace_species:
            raise ValueError
    except ValueError:
        errors.append(
            'ERROR: Conflict: -x/-r: Description given in option -r cannot '
            'contain anything between square brackets if option -x is used.'
        )

    try:
        if species is not None and append_species:
            raise ValueError
    except ValueError:
        errors.append(
            'ERROR: Conflict: -x/-a: Description given in option -a cannot '
            'contain anything between square brackets if option -x is used.'
        )

    if errors != []:
        for error in errors:
            sys.stderr.write(error + '\n')
        sys.stderr.write('\n')
        sys.exit(1)

    sequences, descriptions, seqIDs = import_sequences(
        input_file_name, species, append_species, dont_sort)
    if remove_redundants:
        sequences, descriptions, seqIDs = remove_redundancy(
            sequences, descriptions)
    sequences, descriptions, seqIDs = modify_seqids(
        sequences, descriptions, seqIDs, prefix, suffix, number)
    descriptions = modify_descriptions(descriptions, species,
                                       replace_description, append_description)
    export_sequences(sequences, descriptions, output_file_name, seqIDs)
