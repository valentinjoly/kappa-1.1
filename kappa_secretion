#!/usr/bin/env python3

###############################################################################
#                 KEY AMINOACID PATTERN-BASED PROTEIN ANALYZER                #
#                   KAPPA 1.1 -- Secretion prediction script                  #
###############################################################################

# =============================================================================
# PLEASE CITE:
#   Joly V and Matton DP (2015). KAPPA, a simple algorithm for discovery and
#   clustering of proteins defined by a key amino acid pattern: a case study
#   of the cysteine-rich proteins. Bioinformatics, 31(11), 1716--1723.
#   DOI: 10.1093/bioinformatics/btv047
# =============================================================================
# LICENSE
#   This program is under Creative Commons BY-NC-SA 3.0 License
#   More information at: http://creativecommons.org/licenses/by-nc-sa/3.0/
# =============================================================================
# CONTACT
#   Valentin Joly, doctorant / Ph.D. student
#   Université de Montréal - Institut de Recherche en Biologie Végétale
#   4101, rue Sherbrooke Est
#   Montréal (QC) H2J 2B2
#   valentin.joly (at) umontreal.ca
# =============================================================================

import argparse
import csv
import datetime
import multiprocessing
import os
import re
import subprocess
import sys


def print_stdout(message, level, end):

    time = datetime.datetime.now().strftime('%H:%M:%S')
    print(time, end='')
    spacer = ' ' * (level + 1) * 4
    print(spacer, end='')
    print(message)
    print(end, end='')


def partition_dict(dictionary, nb_parts):

    N = len(dictionary)
    M = nb_parts

    keys = list(dictionary.keys())
    subdicts = []

    for i in range(N % M):
        subdict = {}
        begin = int(i * (1 + (N - N % M) // M))
        end = int((i + 1) * (1 + (N - N % M) // M))
        for j in range(begin, end):
            subdict[keys[j]] = dictionary[keys[j]]
        subdicts.append(subdict)

    for i in range(N % M, M):
        subdict = {}
        begin = N % M + int(i * ((N - N % M) // M))
        end = N % M + int((i + 1) * ((N - N % M) / M))
        for j in range(begin, end):
            subdict[keys[j]] = dictionary[keys[j]]
        subdicts.append(subdict)

    return subdicts


def check_program_path(program):

    fpath, fname = os.path.split(program)
    if fpath:
        if os.path.isfile(fpath) and os.access(fpath, os.X_OK):
            return True
    else:
        for path in os.environ["PATH"].split(os.pathsep):
            path = path.strip('"')
            exe_file = os.path.join(path, program)
            if os.path.isfile(exe_file) and os.access(exe_file, os.X_OK):
                return True
    return False


def read_config_file(config_file_name, secretomep):

    errors = []

    config = {
        'signalp': None,
        'secretomep': None,
        'blastp': None,
        'makeblastdb': None,
        'c': None,
        's': None,
        't': None,
        'u': None,
        'U': None,
        'evalue': None,
        'word_size': None,
        'gapopen': None,
        'gapextend': None,
        'matrix': None,
        'comp_based_stats': None,
        'seg': None,
        'soft_masking': None,
        'lcase_masking': None,
        'culling_limit': None,
        'best_hit_overhang': None,
        'best_hit_score_edge': None,
        'max_target_seqs': None,
        'dbsize': None,
        'searchsp': None,
        'max_hsps': None,
        'sum_statistics': None,
        'xdrop_ungap': None,
        'xdrop_gap': None,
        'xdrop_gap_final': None,
        'window_size': None,
        'ungapped': None,
        'use_sw_tback': None
    }

    config_file = open(config_file_name, 'r')

    i = 0
    for line in config_file:
        i += 1
        if '#' in line:
            line = line[:line.index('#')]
        line = line.strip()
        if line != '':
            if '=' in line:
                option = line[:line.index('=')]
                value = line[line.index('=') + 1:]
                option = option.strip()
                value = value.strip()
            else:
                option = line
                value = ''

            try:
                if option in config.keys():
                    config[option] = value
                else:
                    raise ValueError
            except ValueError:
                errors.append(
                    'ERROR: KAPPA configuration file: Bad line/option name '
                    'formatting. Offending value: '
                    + option + ' (line ' + str(i) + ')')

    signalp_path, secretomep_path = '', ''
    signalp_options = []

    try:
        if config['signalp'] is None or config['signalp'] == '':
            raise ValueError
    except ValueError:
        errors.append(
            'ERROR: KAPPA configuration file: No path to SignalP executable '
            'is provided.')

    try:
        if (config['signalp'] is not None and config['signalp'] != '' and
                not check_program_path(config['signalp'])):
            raise ValueError
        else:
            signalp_path = config['signalp']
    except ValueError:
        errors.append(
            'ERROR: KAPPA configuration file: Path to SignalP executable '
            'is not valid. Offending value: ' + config['signalp'])

    if secretomep:
        try:
            if config['secretomep'] is None or config['secretomep'] == '':
                raise ValueError
        except ValueError:
            errors.append(
                'ERROR: KAPPA configuration file: No path to SecretomeP '
                'executable is provided.')

        try:
            if (config['secretomep'] is not None and
                    config['secretomep'] != '' and
                    not check_program_path(config['secretomep'])):
                raise ValueError
            else:
                secretomep_path = config['secretomep']
        except ValueError:
            errors.append(
                'ERROR: KAPPA configuration file: Path to SecretomeP '
                'executable is not valid. Offending value: '
                + config['secretomep'])

    try:
        if config['c'] is not None:
            if int(config['c']) < 0:
                raise ValueError
            else:
                signalp_options.extend(['-c', config['c']])
    except ValueError:
        errors.append(
            'ERROR: KAPPA configuration file: SignalP option -c must be an '
            'integer number >= 0. Offending value: ' + config['c'])

    try:
        if config['s'] is not None:
            if config['s'] not in ['best', 'notm']:
                raise ValueError
            else:
                signalp_options.extend(['-s', config['s']])
    except ValueError:
        errors.append(
            'ERROR: KAPPA configuration file: SignalP option -s must be equal '
            'to "best" or "notm". Offending value: ' + config['s'])

    try:
        if config['t'] is not None:
            if config['t'] not in ['euk', 'gram-', 'gram+']:
                raise ValueError
            else:
                signalp_options.extend(['-t', config['t']])
    except ValueError:
        errors.append(
            'ERROR: KAPPA configuration file: SignalP option -s must be equal '
            'to "euk", "gram-" or "gram+". Offending value: ' + config['t'])

    try:
        if config['u'] is not None:
            if float(config['u']) < 0 or float(config['u']) > 0.5:
                raise ValueError
            else:
                signalp_options.extend(['-u', config['u']])
    except ValueError:
        errors.append(
            'ERROR: KAPPA configuration file: SignalP option -u must be a '
            'real number comprised between 0 and 0.5 inclusive. Offending '
            'value: ' + config['u'])

    try:
        if config['U'] is not None:
            if float(config['U']) < 0 or float(config['U']) > 0.5:
                raise ValueError
            else:
                signalp_options.extend(['-U', config['U']])
    except ValueError:
        errors.append(
            'ERROR: KAPPA configuration file: SignalP option -U must be a '
            'real number comprised between 0 and 0.5 inclusive. Offending '
            'value: ' + config['U'])

    return signalp_path, secretomep_path, signalp_options, errors


def import_proteins(proteins_file_name):

    print_stdout(
        'Importing proteins from ' + proteins_file_name + '...',
        level=0,
        end='')

    proteins_file = open(proteins_file_name, 'r')
    tmp_proteins = {}
    tmp_fasta_headers = {}

    i = -1

    fasta_structure = re.compile('^>([^ ]*)[^\[\]]*\[([^\]]*)\].*$')

    for line in proteins_file:
        line = line.strip()
        i += 1

        if line != '':
            if line[0] == '>':
                fasta_ID = fasta_structure.match(line)

                if fasta_ID is not None:
                    i += 1
                    seqID = fasta_ID.group(1)
                    tmp_proteins[seqID] = ''
                    tmp_fasta_headers[seqID] = line[1:]

                else:
                    sys.stderr.write(
                        'ERROR: Sequence file does not respect FASTA format '
                        'specifications.\n')
                    sys.stderr.write(
                        '       Sequence identification lines should look '
                        'like:\n')
                    sys.stderr.write(
                        '       >sequence_identification [species/sample] '
                        'description\n\n')
                    sys.exit(1)

            else:
                if i > -1:
                    tmp_proteins[seqID] += line.upper()

    proteins_file.close()

    if len(tmp_proteins) == 0:
        sys.stderr.write('ERROR: No input sequence was found.\n\n')
        sys.exit(1)

    proteins, fasta_headers, seqIDs = {}, {}, {}

    prot = -1
    for seqID in sorted(tmp_proteins.keys()):
        prot += 1
        simpleID = 'prot' + str(prot).zfill(len(str(len(tmp_proteins))))
        seqIDs[simpleID] = seqID
        proteins[simpleID] = tmp_proteins[seqID]
        fasta_headers[simpleID] = tmp_fasta_headers[seqID]

    tmp_proteins, tmp_fasta_headers = {}, {}

    print_stdout(
        'Done. ' + str(len(proteins)) + ' sequences imported.',
        level=1,
        end='\n')

    return proteins, seqIDs, fasta_headers


def predict_secretion_part(
        proteins_part, secretomep, signalp_path, signalp_options,
        secretomep_path, signalp_logfile_name, signalp_logfile,
        secretomep_logfile_name, secretomep_logfile, I, file_id, queue):

    proteins_fasta_name = 'proteins_' + str(I) + '_' + file_id + '.fasta'
    proteins_fasta = open(proteins_fasta_name, 'w')
    for protID in proteins_part.keys():
        proteins_fasta.write('>' + protID + '\n' + proteins_part[protID] +
                             '\n')
    proteins_fasta.close()

    proteins_gff_name = 'proteins_' + str(I) + '_' + file_id + '.gff'

    signalp_cmd = [signalp_path, '-n', proteins_gff_name]
    signalp_cmd.extend(signalp_options)
    signalp_cmd.append(proteins_fasta_name)
    signalp_process = subprocess.call(
        signalp_cmd, stdout=signalp_logfile, stderr=signalp_logfile)
    if signalp_process != 0:
        sys.stderr.write(
            'ERROR: SignalP predictions could not be performed.\n')
        sys.stderr.write('See file ' + signalp_logfile_name +
                         ' for details.\n\n')
        sys.exit(1)

    signalp_results_part = {}
    if os.path.exists(proteins_gff_name):
        proteins_gff = open(proteins_gff_name, 'r')
        signalp_table = csv.reader(proteins_gff, dialect='excel-tab')
        for line in signalp_table:
            if not line[0].startswith('##'):
                simpleID = line[0]
                start = int(line[3])
                end = int(line[4])
                score = float(line[5])
                signalp_results_part[simpleID] = [start, end, score]
        proteins_gff.close()
        os.remove(proteins_gff_name)

    secretomep_results_part = {}

    if secretomep:
        proteins_secretomep_file_name = 'proteins_' + str(
            I) + '_' + file_id + '.txt'
        proteins_secretomep_file = open(proteins_secretomep_file_name, 'w')

        secretomep_cmd = [secretomep_path, proteins_fasta_name]
        secretomep_process = subprocess.call(
            secretomep_cmd,
            stdout=proteins_secretomep_file,
            stderr=secretomep_logfile)
        proteins_secretomep_file.close()

        if signalp_process != 0:
            sys.stderr.write(
                'ERROR: SecretomeP predictions could not be performed.\n')
            sys.stderr.write('See file ' + secretomep_logfile_name +
                             ' for details.\n\n')
            sys.exit(1)

        else:
            proteins_secretomep_file = open(proteins_secretomep_file_name, 'r')
            secretomep_table = csv.reader(
                proteins_secretomep_file, dialect='excel-tab')
            for line in secretomep_table:
                if line != [] and line[0].startswith('prot'):
                    simpleID = line[0].strip(' ')
                    nn_score = float(line[1].strip(' '))
                    odds = float(line[2].strip(' '))
                    weighted = float(line[3].strip(' '))
                    secretomep_results_part[simpleID] = [
                        nn_score, odds, weighted
                    ]
            proteins_secretomep_file.close()
            os.remove(proteins_secretomep_file_name)

    os.remove(proteins_fasta_name)
    secretion_results_part = (signalp_results_part, secretomep_results_part)

    queue.put(secretion_results_part)


def predict_secretion(proteins, secretomep, signalp_path, signalp_options,
                      secretomep_path, threads, file_id):

    print_stdout('Lauching secretion predictions...', level=0, end='')

    proteins_parts = partition_dict(proteins, threads)

    queue = multiprocessing.Queue()
    processes = []

    secretion_results = []

    signalp_logfile_name = 'SignalP_' + file_id + '.log'
    signalp_logfile = open(signalp_logfile_name, 'w')
    secretomep_logfile_name = 'SecretomeP_' + file_id + '.log'
    secretomep_logfile = open(secretomep_logfile_name, 'w')

    I = 0
    for proteins_part in proteins_parts:
        I += 1
        process = multiprocessing.Process(
            target=predict_secretion_part,
            args=(proteins_part, secretomep, signalp_path, signalp_options,
                  secretomep_path, signalp_logfile_name, signalp_logfile,
                  secretomep_logfile_name, secretomep_logfile, I, file_id,
                  queue))
        process.start()
        processes.append(process)

    for p in range(len(processes)):
        secretion_results.append(queue.get())

    signalp_results = {}
    secretomep_results = {}

    for secretion_result in secretion_results:
        signalp_results.update(secretion_result[0])
        secretomep_results.update(secretion_result[1])

    signalp_logfile.close()
    secretomep_logfile.close()

    if os.path.getsize(signalp_logfile_name) == 0:
        os.remove(secretomep_logfile_name)
    if os.path.getsize(secretomep_logfile_name) == 0:
        os.remove(secretomep_logfile_name)

    print_stdout('Done.', level=1, end='\n')

    return signalp_results, secretomep_results


def export_results(signalp_results, secretomep_results, proteins, seqIDs,
                   fasta_headers, fasta_immature, fasta_mature,
                   fasta_not_secreted, secretomep, secretomep_thr, file_id):

    print_stdout('Exporting results...', level=0, end='')

    simpleIDs = list(proteins.keys())
    simpleIDs.sort()

    results_table_file = open('Secretion_predictions_' + file_id + '.csv', 'w')
    results_table = csv.writer(results_table_file, dialect='excel-tab')

    for simpleID in simpleIDs:
        table_row = [seqIDs[simpleID]]
        if simpleID in signalp_results.keys():
            table_row.append('YES')
            table_row.extend(signalp_results[simpleID])
        else:
            table_row.extend(['NO', '', '', ''])
        if secretomep:
            if simpleID in secretomep_results.keys():
                secretomep_result = secretomep_results[simpleID]
                if secretomep_result[0] >= secretomep_thr:
                    table_row.append('YES')
                else:
                    table_row.append('NO')
                table_row.extend(secretomep_result)
            else:
                table_row.extend(['NO', '', '', ''])

        results_table.writerow(table_row)

    results_table_file.close()

    if fasta_immature:
        secreted_immature_fasta = open(
            'Secreted_Immature_proteins_' + file_id + '.fasta', 'w')
    if fasta_mature:
        secreted_mature_fasta = open(
            'Secreted_Mature_proteins_' + file_id + '.fasta', 'w')
    if fasta_not_secreted:
        not_secreted_fasta = open(
            'Not_secreted_proteins_' + file_id + '.fasta', 'w')

    if fasta_immature or fasta_mature or fasta_not_secreted:
        for simpleID in simpleIDs:
            if simpleID in signalp_results.keys():
                if fasta_immature:
                    secreted_immature_fasta.write(
                        '>' + fasta_headers[simpleID] + '\n' +
                        proteins[simpleID] + '\n')
                if fasta_mature:
                    begin = signalp_results[simpleID][1]
                    secreted_mature_fasta.write(
                        '>' + fasta_headers[simpleID] + '\n' +
                        proteins[simpleID][begin:] + '\n')
            elif secretomep and simpleID in secretomep_results.keys(
            ) and secretomep_results[simpleID][0] >= secretomep_thr:
                if fasta_immature:
                    secreted_immature_fasta.write(
                        '>' + fasta_headers[simpleID] + '\n' +
                        proteins[simpleID] + '\n')
                if fasta_mature:
                    secreted_mature_fasta.write('>' + fasta_headers[simpleID] +
                                                '\n' + proteins[simpleID] +
                                                '\n')
            elif fasta_not_secreted:
                not_secreted_fasta.write('>' + fasta_headers[simpleID] + '\n' +
                                         proteins[simpleID] + '\n')

    if fasta_immature:
        secreted_immature_fasta.close()
    if fasta_mature:
        secreted_mature_fasta.close()
    if fasta_not_secreted:
        not_secreted_fasta.close()

    print_stdout('Done.', level=1, end='\n')


if __name__ == '__main__':

    print('')
    print('*'*80)
    print('*' + ' '*19 + 'KAPPA 1.1 -- Secretion prediction script' +
          ' '*19 + '*')
    print('*'*80)
    print('')

    parser = argparse.ArgumentParser(
        description='KAPPA Secretion prediction script.', add_help=False)
    group1 = parser.add_argument_group('General parameters')
    group1.add_argument(
        '-p',
        '--proteins',
        metavar='FILE',
        required=True,
        help='FASTA file(s) containing target protein sequences.')
    group1.add_argument(
        '-s',
        '--secretomep',
        default=False,
        action='store_true',
        help=
        'Also performs Secretomep-1.0 predictions (unconventional secretion).')
    group1.add_argument(
        '-S',
        '--secretomep_thr',
        metavar='FLOAT',
        default=0.8,
        type=float,
        help=
        'SecretomeP score threshold to consider protein as secreted. '
        'Default = 0.8')
    group1.add_argument(
        '-i',
        '--fasta_immature',
        default=False,
        action='store_true',
        help='Exports secreted immature proteins in a FASTA file.')
    group1.add_argument(
        '-m',
        '--fasta_mature',
        default=False,
        action='store_true',
        help=
        'Exports secreted mature proteins in a FASTA file (signal peptide '
        'removed).')
    group1.add_argument(
        '-n',
        '--fasta_not_secreted',
        default=False,
        action='store_true',
        help='Exports not secreted proteins in a FASTA file.')
    group1.add_argument(
        '-T',
        '--threads',
        metavar='INT',
        default=1,
        type=int,
        help='Number of threads to be used. Default = 1')
    group1.add_argument(
        '-o',
        '--output',
        metavar='STR',
        default=None,
        help=
        'Identifier to be included in all output file names. '
        'Default = start date and time.')
    group1.add_argument(
        '-K',
        '--kappa_config',
        metavar='FILE',
        default=os.path.join(
            os.path.dirname(os.path.realpath(__file__)), 'kappa.config'),
        help='KAPPA configuration file.')
    group1.add_argument(
        '-h', '--help', action='help', help='Print this help page and exit.')
    group1.add_argument(
        '-V',
        '--version',
        action='version',
        version='Current version: KAPPA 1.1',
        help='Show program\'s version number and exit.')

    args = parser.parse_args()
    proteins_file_name = args.proteins
    secretomep = args.secretomep
    secretomep_thr = args.secretomep_thr
    fasta_immature = args.fasta_immature
    fasta_mature = args.fasta_mature
    fasta_not_secreted = args.fasta_not_secreted
    threads = args.threads
    file_id = args.output
    config_file_name = args.kappa_config

    # Check arguments

    errors = []

    try:
        if float(secretomep_thr) < 0.0 or float(secretomep_thr) > 1.0:
            raise ValueError
    except ValueError:
        errors.append(
            '-S: Minimum SecretomeP score real number between 0.0 and 1.0')

    try:
        if int(threads) < 1 or int(threads) > multiprocessing.cpu_count():
            raise ValueError
    except ValueError:
        errors.append(
            'ERROR: -T: Number of threads must be an integer between 1 and ' +
            str(multiprocessing.cpu_count()) + '.')

    (signalp_path, secretomep_path,
        signalp_options, config_errors) = read_config_file(
        config_file_name, secretomep)
    errors.extend(config_errors)

    if file_id is not None:
        try:
            for item in [
                    'Secretion_predictions_' + file_id + '.csv',
                    'Secreted_Immature_proteins_' + file_id + '.fasta',
                    'Secreted_Mature_proteins_' + file_id + '.fasta',
                    'Not_secreted_proteins_' + file_id + '.fasta'
            ]:
                if item in os.listdir('.'):
                    raise ValueError
                    break
        except ValueError:
            errors.append(
                'ERROR: -o: This output identifier is already used in present '
                'working directory.')
    else:
        file_id = datetime.datetime.now().strftime('%y-%m-%d_%H-%M-%S')

    try:
        if not os.path.exists(config_file_name):
            raise ValueError
    except ValueError:
        errors.append('ERROR: -K: File ' + config_file_name +
                      ' does not exist.')

    if errors != []:
        for error in errors:
            sys.stderr.write('ERROR: ' + error + '\n')
        sys.stderr.write('\n')
        sys.exit(1)

    # Execution

    proteins, seqIDs, fasta_headers = import_proteins(proteins_file_name)
    proteins_parts = partition_dict(proteins, threads)
    signalp_results, secretomep_results = predict_secretion(
        proteins, secretomep, signalp_path, signalp_options, secretomep_path,
        threads, file_id)
    export_results(signalp_results, secretomep_results, proteins, seqIDs,
                   fasta_headers, fasta_immature, fasta_mature,
                   fasta_not_secreted, secretomep, secretomep_thr, file_id)
